package backenddevelopmentonJava2023;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/*
2 задание
Паролем p будем называть строку из  n  символов, которая состоит из строчных латинских букв.
Георгий придумал особый метод для шифрования паролей на своем сайте. Для этого он берет исходный пароль, выбирает не более  k  позиций в строке и удаляет символы с этих позиций. Чтобы добавить однозначности своему шифрованию, он выбирает позиции так, чтобы в полученной строке было как можно меньше различных символов.
Пока что Георгий занят реализацией другого функционала для своего сайта, поэтому просит вас помочь реализовать описанный выше алгоритм шифрования и по заданному паролю  p  найти количество различных символов в пароле после шифрования.
Формат входных данных
В первой строке входных данных даны два числа n и k  — длина исходного пароля и максимальное количество символов, которое можно удалить, (1≤n≤10^5;0≤k≤10^5)
Во второй строке дан пароль  p  — строка из n  символов, состоящая из строчных латинских букв.
Формат выходных данных
В первой и единственной строке выведите минимальное количество различных символов, которое останется в пароле после применения алгоритма шифрования. 
Примеры данных:
1)Пример
мы вводим в первой строке - 8 4
во второй строке вводим - password
выводим - 3
2)Пример:
мы вводим в первой строке - 7 4
во второй строке вводим - abacaba
выводим - 1
3)Пример
мы вводим в первой строке - 6 7
во второй строке вводим - uvwxyz
выводим - 0
 */

public class SecondTask {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt(); // Длина исходного пароля
        int k = scanner.nextInt(); // Максимальное количество символов, которое можно удалить
        scanner.nextLine(); // Считываем символ новой строки

        String password = scanner.nextLine(); // Входной пароль

        Map<Character, Integer> charCount = new HashMap<>();

        // Подсчитываем количество каждого символа в пароле
        for (char c : password.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }

        // Создаем массив из количества символов
        int[] counts = new int[charCount.size()];
        int index = 0;
        for (int count : charCount.values()) {
            counts[index++] = count;
        }

        // Сортируем массив по убыванию
        java.util.Arrays.sort(counts);

        // Вычисляем количество уникальных символов, которые останутся
        int uniqueCount = counts.length;
        for (int i = 0; i < counts.length && k > 0; i++) {
            if (counts[i] <= k) {
                k -= counts[i];
                uniqueCount--;
            } else {
                break;
            }
        }

        System.out.println(uniqueCount);
    }
}
