package qaengineerweb2024;


import java.util.Scanner;

/*
Задание 6
Аня придумала следующую функцию: f(X) будет равно максимальному количеству операций деления, которые можно проделать с Х по особому правилу. Для каждого деления выбирается простое число q, на которое еще делится Х, после выбирается натуральное число w так, чтобы Х делилось на q^w и чтобы до этого ни на одном из шагов мы не выбирали q^w в качестве делителя.
После этого Х делится на q^w, затем происходит переход на следующий шаг. Если Х уже нельзя ни на что поделить по описанным правилам, то алгоритм заканчивается, а последний шаг без деления не засчитывается (см. примеры для пояснений). Значение функции равно числу, сколько раз операцию деления проделать получилось.
Аня устала ходить по офису, поэтому не может сама вычислить функцию. Напишите программу, которая будет считать значение f(X) для заданного Х.

Формат входных данных
В единственной строке задано число X (1 ≤ X ≤ 10^12).

Формат выходных данных
Выведите значение f (X).
Описание примеров
В первом примере X = 13, 13 — простое число, поэтому X можно поделить только один раз — на 13. Поэтому f(13) = 1f(X) = 1.
Во втором примере Х = 40, можно сначала поделить X на 4 = 2^2, останется 10. Затем поделить на 5 = 5^1, останется 2. И в конце поделить на 2 = 2^1, останется 1. Алгоритм закончен, f(40) = 3.
В третьем примере X = 16. Поделим Х на 4 и затем на 2, останется 2, но так как мы уже использовали 2^1, то делить на него нельзя. f(16) = 2, мы закончили алгоритм до того, как Х достигло единицы.

Примеры данных
Пример 1
Ввод
13
вывод
1

Пример 2
Ввод
40
вывод
3

Пример 3
Ввод
16
вывод
2
 */
public class MaxDivisionsCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long X = scanner.nextLong();

        int maxDivisions = 0;

        for (int i = 2; i <= Math.sqrt(X); i++) {
            int count = 0;

            while (X % i == 0) {
                // Делим X на простое число i, пока это возможно
                X /= i;
                count++;
            }

            maxDivisions = Math.max(maxDivisions, count);
        }

        // Если после всех делений осталось число больше 1, то это число тоже простое
        if (X > 1) {
            maxDivisions = Math.max(maxDivisions, 1);
        }

        System.out.println(maxDivisions);

        scanner.close();
    }
}
